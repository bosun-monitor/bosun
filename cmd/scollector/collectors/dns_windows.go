package collectors

import (
	"bosun.org/metadata"
	"bosun.org/opentsdb"
	"time"
)

func init() {
	c_dns := &IntervalCollector{
		F:        c_dns_windows,
		Interval: time.Second * 30, //Depending on how busy your DNS servers are, 30 might encompass a lot of change, or barely any at all. Seems like a good compromise.
	}
	c_dns.init = wmiInitNamespace(c_dns, func() interface{} { return &[]MicrosoftDNS_Statistic{} }, "", &dnsQuery, rootDNS)
	collectors = append(collectors, c_dns)
}

var (
	dnsQuery string //This will be created by wmiInitNamespace() by using reflection over the struct that's been passed
	rootDNS  = "root\\MicrosoftDNS"
)

func c_dns_windows() (opentsdb.MultiDataPoint, error) {
	var dst []MicrosoftDNS_Statistic                    //Data returned from WMI will be stored here
	var md opentsdb.MultiDataPoint                      //Data to push out will be here
	var dupes = make(map[string]MicrosoftDNS_Statistic) //We are going to push duplicate values that need to be summed here (for more details see comment block above getTagsFromDesc())
	err := queryWmiNamespace(dnsQuery, &dst, rootDNS)   //Get the data. dnsQuery is populated by wmiInitNamespace() in the init function
	if err != nil {
		return nil, err
	}
	for _, v := range dst { //ForEach record in WMI dataset

		if p, ok := DNSStatPropertyMap[v.Name]; ok {
			if p.DoubleUp { //This is a stat that has multiple entries we need to collate it for later
				if _, ok := dupes[p.Metric]; ok { //Key already exists, so we need to add to it
					*dupes[p.Metric].Value += *v.Value
				} else { //Key does not exist, so we need to create it
					dupes[p.Metric] = v
				}
			} else { //Unique stat, we can put it straight away
				if "" == p.Grouping {
					Add(&md, "dns."+p.Category+"."+p.Metric, v.Value, opentsdb.TagSet{}, p.RateType, metadata.Count, v.Name)
				} else {
					Add(&md, "dns."+p.Category+"."+p.Metric, v.Value, opentsdb.TagSet{"type": p.Grouping}, p.RateType, metadata.Count, v.Name)
				}
			}
		}
	}
	for _, v := range dupes { //ForEach record in our added up duplicates
		if p, ok := DNSStatPropertyMap[v.Name]; ok {
			if "" == p.Grouping {
				Add(&md, "dns."+p.Category+"."+p.Metric, v.Value, opentsdb.TagSet{}, p.RateType, metadata.Count, v.Name)
			} else {
				Add(&md, "dns."+p.Category+"."+p.Metric, v.Value, opentsdb.TagSet{"type": p.Grouping}, p.RateType, metadata.Count, v.Name)
			}
		}

	}
	return md, nil
}

type DNSStatProperties struct {
	Category string
	Metric   string
	DoubleUp bool
	Grouping string
	RateType metadata.RateType
}

type MicrosoftDNS_Statistic struct {
	CollectionId   uint32
	CollectionName string
	DnsServerName  string
	Name           string
	//StringValue *string
	Value *uint32 //The namespace documentation does not mention that this is a nullable field, but apparently it is.
}

/*
	So what's the story here? WMI only returns a descriptive text for the counter, which is not particularly useful for Bosun.
	The good news is that there is a mapping between the WMI description and the counters actual internal name (exposed
	in the Get-DNSServerStatus powershell cmdlet. So an awfully long time was spent mapping the description to the actual
	metric name and category.

	There is also a problem where a bunch of the metrics have the same description. This is likely a bug in the namespace
	where there is one counter for UDP and one counter for TCP. For these doubleups, "true" will be returned in the
	third parameter, and these numbers will be summed together and submitted as a single counter.

	The sheet I worked all this out on is here: https://docs.google.com/spreadsheets/d/17Smri2o6Y9EiCrdELRy8TtwTpU5xh_yEoo728XtOgX4/edit?usp=sharing
*/
var DNSStatPropertyMap = map[string]DNSStatProperties{
	"A queries":                            {"query", "queries", false, "typea", metadata.Counter},
	"Active record nodes checked":          {"timeout", "activerecord", false, "", metadata.Counter},
	"Additional questions recursed":        {"recursion", "additionalrecursed", false, "", metadata.Counter},
	"ALL queries":                          {"query", "queries", false, "typeall", metadata.Counter},
	"Allocation count":                     {"memory", "alloc", false, "", metadata.Gauge},
	"Answer responses":                     {"recursion", "responseanswer", false, "", metadata.Counter},
	"Authoritative responses":              {"recursion", "responseauthoritative", false, "", metadata.Counter},
	"AXFR in IXFR":                         {"query", "ixfraxfr", false, "", metadata.Counter},
	"AXFR in IXFR requests":                {"query", "requests", false, "ixfraxfrreq", metadata.Counter},
	"AXFR invalid responses":               {"query", "axfrinvalid", false, "", metadata.Counter},
	"AXFR queries":                         {"query", "queries", false, "typeaxfr", metadata.Counter},
	"AXFR refused responses":               {"query", "axfrrefused", false, "", metadata.Counter},
	"AXFR requests":                        {"query", "requests", true, "axfrrequest", metadata.Counter},
	"AXFR responses":                       {"query", "axfrresponse", false, "", metadata.Counter},
	"AXFR success responses":               {"query", "afxrsuccessresponse", false, "", metadata.Counter},
	"AXFR successes":                       {"query", "axfrsuccess", false, "", metadata.Counter},
	"AxfrLimit refused":                    {"query", "axfrlimit", false, "", metadata.Counter},
	"Bad packet responses":                 {"recursion", "responsebadpacket", false, "", metadata.Counter},
	"Bad time TKEYs":                       {"security", "securitytkeybadtime", false, "", metadata.Counter},
	"BadKey":                               {"error", "errors", false, "badkey", metadata.Counter},
	"BadKey TSIGs":                         {"security", "securitytsigbadkey", false, "", metadata.Counter},
	"BadSig":                               {"error", "errors", false, "badsig", metadata.Counter},
	"BadTime":                              {"error", "errors", false, "badtime", metadata.Counter},
	"Cache update failures":                {"recursion", "cacheupdatefailure", false, "", metadata.Counter},
	"Cache update queries allocated":       {"recursion", "cacheupdatealloc", false, "", metadata.Counter},
	"Cache update queries for root NS":     {"recursion", "rootnsquery", false, "", metadata.Counter},
	"Cache update queries freed":           {"recursion", "cacheupdatefree", false, "", metadata.Counter},
	"Cache update queries resumed":         {"recursion", "resumesuspendedquery", false, "", metadata.Counter},
	"Cache update queries suspended":       {"recursion", "suspendedquery", false, "", metadata.Counter},
	"Cache update query responses":         {"recursion", "cacheupdateresponse", false, "", metadata.Counter},
	"Cache update query retries":           {"recursion", "cacheupdateretry", false, "", metadata.Counter},
	"Cache update responses for root NS":   {"recursion", "rootnsresponse", false, "", metadata.Counter},
	"Cached records timed out":             {"record", "cachetimeouts", false, "", metadata.Counter},
	"Can not delete nodes checked":         {"timeout", "cannotdelete", false, "", metadata.Counter},
	"Checks where cache exceeded limit":    {"cache", "exceededlimit", false, "", metadata.Counter},
	"Continue current lookup responses":    {"recursion", "continuecurrentlookup", false, "", metadata.Counter},
	"Continue current recursion responses": {"recursion", "continuecurrentrecursion", false, "", metadata.Counter},
	"Continue next lookup responses":       {"recursion", "continuenextlookup", false, "", metadata.Counter},
	"Database nodes in use":                {"database", "nodeinuse", false, "", metadata.Gauge},
	"Database nodes memory":                {"database", "nodememory", false, "", metadata.Gauge},
	"Database nodes returned":              {"database", "nodereturn", false, "", metadata.Gauge},
	"Database nodes used":                  {"database", "nodeused", false, "", metadata.Gauge},
	"Delayed frees executed":               {"timeout", "delayedfreesexecuted", false, "", metadata.Counter},
	"Delayed frees executed with function": {"timeout", "delayedfreesexecutedwithfunction", false, "", metadata.Counter},
	"Delayed frees queued":                 {"timeout", "delayedfreesqueued", false, "", metadata.Counter},
	"Delayed frees queued with function":   {"timeout", "delayedfreesqueuedwithfunction", false, "", metadata.Counter},
	"Delegation responses":                 {"recursion", "responsedelegation", false, "", metadata.Counter},
	"Deleted nodes checked":                {"timeout", "deleted", false, "", metadata.Counter},
	"DnsLib blocks allocated":              {"memory", "dnslib", false, "dnslibblocksallocated", metadata.Gauge},
	"DnsLib blocks freed":                  {"memory", "dnslib", false, "dnslibblocksfreed", metadata.Gauge},
	"DnsLib blocks in use":                 {"memory", "dnslib", false, "dnslibblocksinuse", metadata.Gauge},
	"DnsLib memory":                        {"memory", "dnslib", false, "dnslibmemory", metadata.Gauge},
	"DS DN blocks allocated":               {"domainservices", "dnblocksallocated", false, "", metadata.Counter},
	"DS DN blocks freed":                   {"domainservices", "dnblocksfreed", false, "", metadata.Counter},
	"DS DN blocks in use":                  {"domainservices", "dnblocksinuse", false, "", metadata.Counter},
	"DS DN memory":                         {"domainservices", "dnmemory", false, "", metadata.Counter},
	"DS Mod blocks allocated":              {"domainservices", "modblocksallocated", false, "", metadata.Counter},
	"DS Mod blocks freed":                  {"domainservices", "modblocksfreed", false, "", metadata.Counter},
	"DS Mod blocks in use":                 {"domainservices", "modblocksinuse", false, "", metadata.Counter},
	"DS Mod memory":                        {"domainservices", "modmemory", false, "", metadata.Counter},
	"DS Other blocks allocated":            {"domainservices", "otherblocksallocated", false, "", metadata.Counter},
	"DS Other blocks freed":                {"domainservices", "otherblocksfreed", false, "", metadata.Counter},
	"DS Other blocks in use":               {"domainservices", "otherblocksinuse", false, "", metadata.Counter},
	"DS Other memory":                      {"domainservices", "othermemory", false, "", metadata.Counter},
	"DS Record blocks allocated":           {"domainservices", "recordblocksallocated", false, "", metadata.Counter},
	"DS Record blocks freed":               {"domainservices", "recordblocksfreed", false, "", metadata.Counter},
	"DS Record blocks in use":              {"domainservices", "recordblocksinuse", false, "", metadata.Counter},
	"DS Record memory":                     {"domainservices", "recordmemory", false, "", metadata.Counter},
	"Echo TSIGs":                           {"security", "securitytsigecho", false, "", metadata.Counter},
	"Empty responses":                      {"recursion", "responseempty", false, "", metadata.Counter},
	"EventControl blocks allocated":        {"memory", "eventcontrol", false, "eventcontrolblocksallocated", metadata.Gauge},
	"EventControl blocks freed":            {"memory", "eventcontrol", false, "eventcontrolblocksfreed", metadata.Gauge},
	"EventControl blocks in use":           {"memory", "eventcontrol", false, "eventcontrolblocksinuse", metadata.Gauge},
	"EventControl memory":                  {"memory", "eventcontrol", false, "eventcontrolmemory", metadata.Gauge},
	"Failed adds":                          {"domainservices", "failedldapadd", false, "", metadata.Counter},
	"Failed cache enforcement passes":      {"cache", "failedfreepasses", false, "", metadata.Counter},
	"Failed deletions":                     {"domainservices", "faileddeletedsentries", false, "", metadata.Counter},
	"Failed modifies":                      {"domainservices", "failedldapmodify", false, "", metadata.Counter},
	"Failed reads":                         {"domainservices", "failedreadrecords", false, "", metadata.Counter},
	"File Buffer blocks allocated":         {"memory", "filebuffer", false, "filebufferblocksallocated", metadata.Gauge},
	"File Buffer blocks freed":             {"memory", "filebuffer", false, "filebufferblocksfreed", metadata.Gauge},
	"File Buffer blocks in use":            {"memory", "filebuffer", false, "filebufferblocksinuse", metadata.Gauge},
	"File Buffer memory":                   {"memory", "filebuffer", false, "filebuffermemory", metadata.Gauge},
	"Final queued timeouts":                {"recursion", "finaltimeoutqueued", false, "", metadata.Counter},
	"Final timeouts expired":               {"recursion", "finaltimeoutexpired", false, "", metadata.Counter},
	"FormErr TSIGs":                        {"security", "securitytsigformerror", false, "", metadata.Counter},
	"FormErrors":                           {"query", "formerror", false, "", metadata.Counter},
	"Forwarded responses":                  {"query", "forwardedresponses", false, "", metadata.Counter},
	"Forwarded updates in queue":           {"update", "forwardinqueue", true, "", metadata.Counter},
	"Free count":                           {"memory", "free", false, "", metadata.Gauge},
	"Into authority failures":              {"error", "errors", false, "intoauthorityfailures", metadata.Counter},
	"Invalid TKEYs":                        {"security", "securitytkeyinvalid", false, "", metadata.Counter},
	"IXFR queries":                         {"query", "queries", false, "typeixfr", metadata.Counter},
	"IXFR requests":                        {"query", "requests", false, "ixfrrequest", metadata.Counter},
	"IXFR successes":                       {"query", "ixfrsuccesses", false, "", metadata.Counter},
	"IXFR TCP AXFR responses":              {"query", "ixfrtcpaxfr", false, "", metadata.Counter},
	"IXFR TCP force AXFR":                  {"query", "ixfrtcpforceaxfr", false, "", metadata.Counter},
	"IXFR TCP FormError responses":         {"query", "ixfrtcpformerror", false, "", metadata.Counter},
	"IXFR TCP invalid responses":           {"query", "ixfrtcpinvalid", false, "", metadata.Counter},
	"IXFR TCP refused responses":           {"query", "ixfrtcprefused", false, "", metadata.Counter},
	"IXFR TCP requests":                    {"query", "requests", true, "ixfrtcprequest", metadata.Counter},
	"IXFR TCP responses":                   {"query", "ixfrtcpresponse", false, "", metadata.Counter},
	"IXFR TCP success responses":           {"query", "ixfrtcpsuccessresponses", false, "", metadata.Counter},
	"IXFR TCP successes":                   {"query", "ixfrtcpsuccess", false, "", metadata.Counter},
	"IXFR UDP force AXFR":                  {"query", "ixfrudpforceaxfr", false, "", metadata.Counter},
	"IXFR UDP force TCP":                   {"query", "ixfrudpforcetcp", false, "", metadata.Counter},
	"IXFR UDP FormError responses":         {"query", "ixfrudpformerror", false, "", metadata.Counter},
	"IXFR UDP invalid responses":           {"query", "ixfrudpinvalid", false, "", metadata.Counter},
	"IXFR UDP new primary responses":       {"query", "ixfrudpnewprimary", false, "", metadata.Counter},
	"IXFR UDP refused responses":           {"query", "ixfrudprefused", false, "", metadata.Counter},
	"IXFR UDP requests":                    {"query", "requests", true, "ixfrudprequest", metadata.Counter},
	"IXFR UDP responses":                   {"query", "ixfrudpresponse", false, "", metadata.Counter},
	"IXFR UDP success responses":           {"query", "ixfrudpsuccessresponses", false, "", metadata.Counter},
	"IXFR UDP successes":                   {"query", "ixfrudpsuccess", false, "", metadata.Counter},
	"IXFR UDP UseAxfr responses":           {"query", "ixfrudpuseaxfr", false, "", metadata.Counter},
	"IXFR UDP UseTcp responses":            {"query", "ixfrudpusetcp", false, "", metadata.Counter},
	"IXFR UDP wrong server responses":      {"query", "ixfrudpwrongserver", false, "", metadata.Counter},
	"LDAP average write time":              {"domainservices", "ldapwriteaverage", false, "", metadata.Counter},
	"LDAP reconnects":                      {"domainservices", "ldapreconnects", false, "", metadata.Counter},
	"LDAP timed writes":                    {"domainservices", "ldaptimedwrites", false, "", metadata.Counter},
	"LDAP total write time":                {"domainservices", "ldapwritetimetotal", false, "", metadata.Counter},
	"LDAP writes < 10 ms":                  {"domainservices", "writespeed", false, "ldapwritesunder10ms", metadata.Counter},
	"LDAP writes < 100 ms":                 {"domainservices", "writespeed", false, "ldapwritesunder100ms", metadata.Counter},
	"LDAP writes < 1 s":                    {"domainservices", "writespeed", false, "ldapwritesunder1s", metadata.Counter},
	"LDAP writes < 10 s":                   {"domainservices", "writespeed", false, "ldapwritesunder10s", metadata.Counter},
	"LDAP writes < 100 s":                  {"domainservices", "writespeed", false, "ldapwritesunder100s", metadata.Counter},
	"LDAP writes > 100 s":                  {"domainservices", "writespeed", false, "ldapwritesover100s", metadata.Counter},
	"LDAP writes for A type":               {"domainservices", "writetypes", false, "writesforatype", metadata.Counter},
	"LDAP writes for A6 type":              {"domainservices", "writetypes", false, "writesfora6type", metadata.Counter},
	"LDAP writes for AAAA type":            {"domainservices", "writetypes", false, "writesforaaaatype", metadata.Counter},
	"LDAP writes for AFSDB type":           {"domainservices", "writetypes", false, "writesforafsdbtype", metadata.Counter},
	"LDAP writes for ATMA type":            {"domainservices", "writetypes", false, "writesforatmatype", metadata.Counter},
	"LDAP writes for CERT type":            {"domainservices", "writetypes", false, "writesforcerttype", metadata.Counter},
	"LDAP writes for CNAME type":           {"domainservices", "writetypes", false, "writesforcnametype", metadata.Counter},
	"LDAP writes for EID type":             {"domainservices", "writetypes", false, "writesforeidtype", metadata.Counter},
	"LDAP writes for GPOS type":            {"domainservices", "writetypes", false, "writesforgpostype", metadata.Counter},
	"LDAP writes for HINFO type":           {"domainservices", "writetypes", false, "writesforhinfotype", metadata.Counter},
	"LDAP writes for ISDN type":            {"domainservices", "writetypes", false, "writesforisdntype", metadata.Counter},
	"LDAP writes for KEY type":             {"domainservices", "writetypes", false, "writesforkeytype", metadata.Counter},
	"LDAP writes for KX type":              {"domainservices", "writetypes", false, "writesforkxtype", metadata.Counter},
	"LDAP writes for LOC type":             {"domainservices", "writetypes", false, "writesforloctype", metadata.Counter},
	"LDAP writes for MB type":              {"domainservices", "writetypes", false, "writesformbtype", metadata.Counter},
	"LDAP writes for MG type":              {"domainservices", "writetypes", false, "writesformgtype", metadata.Counter},
	"LDAP writes for MINFO type":           {"domainservices", "writetypes", false, "writesforminfotype", metadata.Counter},
	"LDAP writes for mixed type":           {"domainservices", "writetypes", false, "writesformixedtype", metadata.Counter},
	"LDAP writes for MR type":              {"domainservices", "writetypes", false, "writesformrtype", metadata.Counter},
	"LDAP writes for MX type":              {"domainservices", "writetypes", false, "writesformxtype", metadata.Counter},
	"LDAP writes for NAPTR type":           {"domainservices", "writetypes", false, "writesfornaptrtype", metadata.Counter},
	"LDAP writes for NIMLOC type":          {"domainservices", "writetypes", false, "writesfornimloctype", metadata.Counter},
	"LDAP writes for NS type":              {"domainservices", "writetypes", false, "writesfornstype", metadata.Counter},
	"LDAP writes for NSAP type":            {"domainservices", "writetypes", false, "writesfornsaptype", metadata.Counter},
	"LDAP writes for NSAPPTR type":         {"domainservices", "writetypes", false, "writesfornsapptrtype", metadata.Counter},
	"LDAP writes for NULL type":            {"domainservices", "writetypes", false, "writesfornulltype", metadata.Counter},
	"LDAP writes for NXT type":             {"domainservices", "writetypes", false, "writesfornxttype", metadata.Counter},
	"LDAP writes for PTR type":             {"domainservices", "writetypes", false, "writesforptrtype", metadata.Counter},
	"LDAP writes for PX type":              {"domainservices", "writetypes", false, "writesforpxtype", metadata.Counter},
	"LDAP writes for RP type":              {"domainservices", "writetypes", false, "writesforrptype", metadata.Counter},
	"LDAP writes for RT type":              {"domainservices", "writetypes", false, "writesforrttype", metadata.Counter},
	"LDAP writes for SIG type":             {"domainservices", "writetypes", false, "writesforsigtype", metadata.Counter},
	"LDAP writes for SOA type":             {"domainservices", "writetypes", false, "writesforsoatype", metadata.Counter},
	"LDAP writes for SRV type":             {"domainservices", "writetypes", false, "writesforsrvtype", metadata.Counter},
	"LDAP writes for TXT type":             {"domainservices", "writetypes", false, "writesfortxttype", metadata.Counter},
	"LDAP writes for unknown type":         {"domainservices", "writetypes", false, "writesforunknowntype", metadata.Counter},
	"LDAP writes for WKS type":             {"domainservices", "writetypes", false, "writesforwkstype", metadata.Counter},
	"LDAP writes for X25 type":             {"domainservices", "writetypes", false, "writesforx25type", metadata.Counter},
	"LDAP writes for ZERO type":            {"domainservices", "writetypes", false, "writesforzerotype", metadata.Counter},
	"LDAP writes max timeout":              {"domainservices", "writetypes", false, "writesmaxtimeout", metadata.Counter},
	"Max":                                           {"error", "errors", false, "max", metadata.Counter},
	"MX queries":                                    {"query", "queries", false, "typemx", metadata.Counter},
	"Name blocks allocated":                         {"memory", "name", false, "nameblocksallocated", metadata.Gauge},
	"Name blocks freed":                             {"memory", "name", false, "nameblocksfreed", metadata.Gauge},
	"Name blocks in use":                            {"memory", "name", false, "nameblocksinuse", metadata.Gauge},
	"Name error responses":                          {"recursion", "responsenameerror", false, "", metadata.Counter},
	"Name memory":                                   {"memory", "name", false, "namememory", metadata.Gauge},
	"NameErrors":                                    {"query", "nameerror", false, "", metadata.Counter},
	"Nbstat blocks allocated":                       {"netbios", "nbstatallocated", false, "", metadata.Counter},
	"Nbstat blocks freed":                           {"netbios", "nbstatfree", false, "", metadata.Counter},
	"Nbstat blocks in use":                          {"netbios", "nbstatused", false, "", metadata.Counter},
	"Nbstat buffers in use":                         {"netbios", "nbstatinuse", false, "", metadata.Counter},
	"Nbstat buffers on free list":                   {"netbios", "nbstatinfreelist", false, "", metadata.Counter},
	"Nbstat buffers returned":                       {"netbios", "nbstatreturn", false, "", metadata.Counter},
	"Nbstat memory":                                 {"netbios", "nbstatmemory", false, "", metadata.Counter},
	"Nbstat memory highwater mark":                  {"netbios", "nbstatnetallocs", false, "", metadata.Counter},
	"Nbstat net buffers allocated":                  {"memory", "nbstat", true, "nbstatnetbuffersallocated", metadata.Gauge},
	"Nbstat net bytes allocated":                    {"memory", "nbstat", true, "nbstatnetbytesallocated", metadata.Gauge},
	"Nbstat total buffers allocated":                {"memory", "nbstat", true, "nbstattotalbuffersallocated", metadata.Gauge},
	"Nbstat total buffers freed":                    {"memory", "nbstat", true, "nbstattotalbuffersfreed", metadata.Gauge},
	"Node Admin blocks allocated":                   {"memory", "node.admin", false, "nodeadminblocksallocated", metadata.Gauge},
	"Node Admin blocks freed":                       {"memory", "node.admin", false, "nodeadminblocksfreed", metadata.Gauge},
	"Node Admin blocks in use":                      {"memory", "node.admin", false, "nodeadminblocksinuse", metadata.Gauge},
	"Node Admin memory":                             {"memory", "node.admin", false, "nodeadminmemory", metadata.Gauge},
	"Node Auto blocks allocated":                    {"memory", "node.auto", false, "nodeautoblocksallocated", metadata.Gauge},
	"Node Auto blocks freed":                        {"memory", "node.auto", false, "nodeautoblocksfreed", metadata.Gauge},
	"Node Auto blocks in use":                       {"memory", "node.auto", false, "nodeautoblocksinuse", metadata.Gauge},
	"Node Auto memory":                              {"memory", "node.auto", false, "nodeautomemory", metadata.Gauge},
	"Node AXFR blocks allocated":                    {"memory", "node.axfr", false, "nodeaxfrblocksallocated", metadata.Gauge},
	"Node AXFR blocks freed":                        {"memory", "node.axfr", false, "nodeaxfrblocksfreed", metadata.Gauge},
	"Node AXFR blocks in use":                       {"memory", "node.axfr", false, "nodeaxfrblocksinuse", metadata.Gauge},
	"Node AXFR memory":                              {"memory", "node.axfr", false, "nodeaxfrmemory", metadata.Gauge},
	"Node blocks allocated":                         {"memory", "node", false, "nodeblocksallocated", metadata.Gauge},
	"Node blocks freed":                             {"memory", "node", false, "nodeblocksfreed", metadata.Gauge},
	"Node blocks in use":                            {"memory", "node", false, "nodeblocksinuse", metadata.Gauge},
	"Node Cache blocks allocated":                   {"memory", "node.cache", false, "nodecacheblocksallocated", metadata.Gauge},
	"Node Cache blocks freed":                       {"memory", "node.cache", false, "nodecacheblocksfreed", metadata.Gauge},
	"Node Cache blocks in use":                      {"memory", "node.cache", false, "nodecacheblocksinuse", metadata.Gauge},
	"Node Cache memory":                             {"memory", "node.cache", false, "nodecachememory", metadata.Gauge},
	"Node Copy blocks allocated":                    {"memory", "node.copy", false, "nodecopyblocksallocated", metadata.Gauge},
	"Node Copy blocks freed":                        {"memory", "node.copy", false, "nodecopyblocksfreed", metadata.Gauge},
	"Node Copy blocks in use":                       {"memory", "node.copy", false, "nodecopyblocksinuse", metadata.Gauge},
	"Node Copy memory":                              {"memory", "node.copy", false, "nodecopymemory", metadata.Gauge},
	"Node DS blocks allocated":                      {"memory", "node.ds", false, "nodedsblocksallocated", metadata.Gauge},
	"Node DS blocks freed":                          {"memory", "node.ds", false, "nodedsblocksfreed", metadata.Gauge},
	"Node DS blocks in use":                         {"memory", "node.ds", false, "nodedsblocksinuse", metadata.Gauge},
	"Node DS memory":                                {"memory", "node.ds", false, "nodedsmemory", metadata.Gauge},
	"Node File blocks allocated":                    {"memory", "node.file", false, "nodefileblocksallocated", metadata.Gauge},
	"Node File blocks freed":                        {"memory", "node.file", false, "nodefileblocksfreed", metadata.Gauge},
	"Node File blocks in use":                       {"memory", "node.file", false, "nodefileblocksinuse", metadata.Gauge},
	"Node File memory":                              {"memory", "node.file", false, "nodefilememory", metadata.Gauge},
	"Node Hash blocks allocated":                    {"memory", "node.hash", false, "nodehashblocksallocated", metadata.Gauge},
	"Node Hash blocks freed":                        {"memory", "node.hash", false, "nodehashblocksfreed", metadata.Gauge},
	"Node Hash blocks in use":                       {"memory", "node.hash", false, "nodehashblocksinuse", metadata.Gauge},
	"Node Hash memory":                              {"memory", "node.hash", false, "nodehashmemory", metadata.Gauge},
	"Node IXFR blocks allocated":                    {"memory", "node.ixfr", false, "nodeixfrblocksallocated", metadata.Gauge},
	"Node IXFR blocks freed":                        {"memory", "node.ixfr", false, "nodeixfrblocksfreed", metadata.Gauge},
	"Node IXFR blocks in use":                       {"memory", "node.ixfr", false, "nodeixfrblocksinuse", metadata.Gauge},
	"Node IXFR memory":                              {"memory", "node.ixfr", false, "nodeixfrmemory", metadata.Gauge},
	"Node memory":                                   {"memory", "nodememory", false, "", metadata.Gauge},
	"Node NoExist blocks allocated":                 {"memory", "node.noexist", false, "nodenoexistblocksallocated", metadata.Gauge},
	"Node NoExist blocks freed":                     {"memory", "node.noexist", false, "nodenoexistblocksfreed", metadata.Gauge},
	"Node NoExist blocks in use":                    {"memory", "node.noexist", false, "nodenoexistblocksinuse", metadata.Gauge},
	"Node NoExist memory":                           {"memory", "node.noexist", false, "nodenoexistmemory", metadata.Gauge},
	"Node Update blocks allocated":                  {"memory", "node.update", false, "nodeupdateblocksallocated", metadata.Gauge},
	"Node Update blocks freed":                      {"memory", "node.update", false, "nodeupdateblocksfreed", metadata.Gauge},
	"Node Update blocks in use":                     {"memory", "node.update", false, "nodeupdateblocksinuse", metadata.Gauge},
	"Node Update memory":                            {"memory", "node.update", false, "nodeupdatememory", metadata.Gauge},
	"Node WINS blocks allocated":                    {"memory", "node.wins", false, "nodewinsblocksallocated", metadata.Gauge},
	"Node WINS blocks freed":                        {"memory", "node.wins", false, "nodewinsblocksfreed", metadata.Gauge},
	"Node WINS blocks in use":                       {"memory", "node.wins", false, "nodewinsblocksinuse", metadata.Gauge},
	"Node WINS memory":                              {"memory", "node.wins", false, "nodewinsmemory", metadata.Gauge},
	"Node WINS-PTR blocks allocated":                {"memory", "node.winsptr", false, "nodewins-ptrblocksallocated", metadata.Gauge},
	"Node WINS-PTR blocks freed":                    {"memory", "node.winsptr", false, "nodewins-ptrblocksfreed", metadata.Gauge},
	"Node WINS-PTR blocks in use":                   {"memory", "node.winsptr", false, "nodewins-ptrblocksinuse", metadata.Gauge},
	"Node WINS-PTR memory":                          {"memory", "node.winsptr", false, "nodewins-ptrmemory", metadata.Gauge},
	"Nodes added":                                   {"domainservices", "dsnodesadded", false, "", metadata.Counter},
	"Nodes checked":                                 {"timeout", "checks", false, "", metadata.Counter},
	"Nodes deleted":                                 {"domainservices", "dsnodesdeleted", false, "", metadata.Counter},
	"Nodes directed queued":                         {"timeout", "setdirect", false, "", metadata.Counter},
	"Nodes duplicate (already queued)":              {"timeout", "alreadyinsystem", false, "", metadata.Counter},
	"Nodes loaded":                                  {"domainservices", "dsnodesloaded", false, "", metadata.Counter},
	"Nodes modified":                                {"domainservices", "dsnodesmodified", false, "", metadata.Counter},
	"Nodes queued":                                  {"memory", "nodesqueued", false, "", metadata.Gauge},
	"Nodes queued from child delete":                {"timeout", "setfromchilddelete", false, "", metadata.Counter},
	"Nodes queued from reference":                   {"timeout", "setfromdereference", false, "", metadata.Counter},
	"Nodes read":                                    {"domainservices", "dstotalnodesread", false, "", metadata.Counter},
	"Nodes tombstoned":                              {"domainservices", "dsnodestombstoned", false, "", metadata.Counter},
	"Nodes write suppressed":                        {"domainservices", "dswritesuppressed", false, "", metadata.Counter},
	"NoError":                                       {"error", "errors", false, "noerror", metadata.Counter},
	"Non-zone data responses":                       {"recursion", "responsenonzonedata", false, "", metadata.Counter},
	"None blocks allocated":                         {"memory", "none", false, "noneblocksallocated", metadata.Gauge},
	"None blocks freed":                             {"memory", "none", false, "noneblocksfreed", metadata.Gauge},
	"None blocks in use":                            {"memory", "none", false, "noneblocksinuse", metadata.Gauge},
	"None memory":                                   {"memory", "none", false, "nonememory", metadata.Gauge},
	"NotAuth":                                       {"error", "errors", false, "notauthoritative", metadata.Counter},
	"NotAuthoritative responses":                    {"recursion", "responsenotauthoritative", false, "", metadata.Counter},
	"Notifies current version":                      {"query", "notifycurrentversion", false, "", metadata.Counter},
	"Notifies invalid":                              {"query", "notifyinvalid", false, "", metadata.Counter},
	"Notifies master unknown":                       {"query", "notifymasterunknown", false, "", metadata.Counter},
	"Notifies new version":                          {"query", "notifynewversion", false, "", metadata.Counter},
	"Notifies no version":                           {"query", "notifynoversion", false, "", metadata.Counter},
	"Notifies old version":                          {"query", "notifyoldversion", false, "", metadata.Counter},
	"Notifies primary":                              {"query", "notifyprimary", false, "", metadata.Counter},
	"Notifies received":                             {"query", "notifyreceived", false, "", metadata.Counter},
	"Notifies sent":                                 {"query", "notifysent", false, "", metadata.Counter},
	"Notify queries":                                {"query", "queries", false, "notify", metadata.Counter},
	"NotImpl":                                       {"error", "errors", false, "notimpl", metadata.Counter},
	"NotZone":                                       {"error", "errors", false, "notzone", metadata.Counter},
	"NS queries":                                    {"query", "queries", false, "typens", metadata.Counter},
	"NxDomain":                                      {"error", "errors", false, "nxdomain", metadata.Counter},
	"NxRRSet":                                       {"error", "errors", false, "nxrrset", metadata.Counter},
	"Original questions recursed":                   {"recursion", "originalquestionrecursed", true, "", metadata.Counter},
	"Other queries":                                 {"query", "queries", false, "typeother", metadata.Counter},
	"Passes requiring aggressive free":              {"cache", "passesrequiringaggressivefree", false, "", metadata.Counter},
	"Passes where nothing was freed":                {"cache", "passeswithnofrees", false, "", metadata.Counter},
	"Polling passes with DS errors":                 {"domainservices", "pollingpasseswithdserrors", false, "", metadata.Counter},
	"Previous zone failures":                        {"recursion", "failurereachpreviousresponse", false, "", metadata.Counter},
	"PTR queries":                                   {"query", "queries", false, "typeptr", metadata.Counter},
	"Queries received":                              {"query", "queriesreceived", false, "", metadata.Counter},
	"Queries recursed":                              {"recursion", "queriesrecursed", false, "", metadata.Counter},
	"Rcode responses":                               {"recursion", "responsercode", false, "", metadata.Counter},
	"Recent access nodes checked":                   {"timeout", "recentaccess", false, "", metadata.Counter},
	"Record blocks allocated":                       {"memory", "record", false, "recordblocksallocated", metadata.Gauge},
	"Record blocks freed":                           {"memory", "record", false, "recordblocksfreed", metadata.Gauge},
	"Record blocks in use":                          {"memory", "record", false, "recordblocksinuse", metadata.Gauge},
	"Record memory":                                 {"memory", "record", false, "recordmemory", metadata.Gauge},
	"Records currently cached":                      {"record", "cachecurrent", false, "", metadata.Counter},
	"Records in use":                                {"record", "inuse", false, "", metadata.Counter},
	"Records loaded":                                {"domainservices", "dsrecordsloaded", false, "", metadata.Counter},
	"Records memory":                                {"domainservices", "memory", false, "", metadata.Counter},
	"Records queued for slow free":                  {"record", "slowfreequeued", false, "", metadata.Counter},
	"Records read":                                  {"domainservices", "dstotalrecordsread", false, "", metadata.Counter},
	"Records returned":                              {"record", "return", false, "", metadata.Counter},
	"Records slow freed":                            {"record", "slowfreefinished", false, "", metadata.Counter},
	"Records used":                                  {"record", "used", false, "", metadata.Counter},
	"Recurse failures":                              {"recursion", "recursionfailure", false, "", metadata.Counter},
	"Recursion messages returned":                   {"packet", "recursepacketreturn", false, "", metadata.Counter},
	"Recursion messages used":                       {"packet", "recursepacketused", false, "", metadata.Counter},
	"Refused":                                       {"error", "errors", true, "refused", metadata.Counter},
	"Registry blocks allocated":                     {"memory", "registry", false, "registryblocksallocated", metadata.Gauge},
	"Registry blocks freed":                         {"memory", "registry", false, "registryblocksfreed", metadata.Gauge},
	"Registry blocks in use":                        {"memory", "registry", false, "registryblocksinuse", metadata.Gauge},
	"Registry memory":                               {"memory", "registry", false, "registrymemory", metadata.Gauge},
	"Remote IP blocks allocated":                    {"memory", "remoteip", false, "remoteipblocksallocated", metadata.Gauge},
	"Remote IP blocks freed":                        {"memory", "remoteip", false, "remoteipblocksfreed", metadata.Gauge},
	"Remote IP blocks in use":                       {"memory", "remoteip", false, "remoteipblocksinuse", metadata.Gauge},
	"Remote IP memory":                              {"memory", "remoteip", false, "remoteipmemory", metadata.Gauge},
	"Requests":                                      {"query", "request", false, "", metadata.Counter},
	"Responses for forwarded updates":               {"query", "responsesforforwardedupdates", true, "", metadata.Counter},
	"Responses from forwarders":                     {"recursion", "responsefromforwarder", false, "", metadata.Counter},
	"Responses mismatched":                          {"recursion", "responsesmismatched", false, "", metadata.Counter},
	"Responses sent":                                {"query", "responsessent", false, "", metadata.Counter},
	"Responses unmatched":                           {"recursion", "responsesunmatched", false, "", metadata.Counter},
	"Retries":                                       {"recursion", "retries", false, "", metadata.Counter},
	"Retry count failures":                          {"query", "retrycountfailures", false, "", metadata.Counter},
	"RPC blocks allocated":                          {"memory", "rpc", false, "rpcblocksallocated", metadata.Gauge},
	"RPC blocks freed":                              {"memory", "rpc", false, "rpcblocksfreed", metadata.Gauge},
	"RPC blocks in use":                             {"memory", "rpc", false, "rpcblocksinuse", metadata.Gauge},
	"RPC memory":                                    {"memory", "rpc", false, "rpcmemory", metadata.Gauge},
	"RR Admin blocks allocated":                     {"memory", "rr.admin", false, "rradminblocksallocated", metadata.Gauge},
	"RR Admin blocks freed":                         {"memory", "rr.admin", false, "rradminblocksfreed", metadata.Gauge},
	"RR Admin blocks in use":                        {"memory", "rr.admin", false, "rradminblocksinuse", metadata.Gauge},
	"RR Admin memory":                               {"memory", "rr.admin", false, "rradminmemory", metadata.Gauge},
	"RR Auto blocks allocated":                      {"memory", "rr.auto", false, "rrautoblocksallocated", metadata.Gauge},
	"RR Auto blocks freed":                          {"memory", "rr.auto", false, "rrautoblocksfreed", metadata.Gauge},
	"RR Auto blocks in use":                         {"memory", "rr.auto", false, "rrautoblocksinuse", metadata.Gauge},
	"RR Auto memory":                                {"memory", "rr.auto", false, "rrautomemory", metadata.Gauge},
	"RR AXFR blocks allocated":                      {"memory", "rr.axfr", false, "rraxfrblocksallocated", metadata.Gauge},
	"RR AXFR blocks freed":                          {"memory", "rr.axfr", false, "rraxfrblocksfreed", metadata.Gauge},
	"RR AXFR blocks in use":                         {"memory", "rr.axfr", false, "rraxfrblocksinuse", metadata.Gauge},
	"RR AXFR memory":                                {"memory", "rr.axfr", false, "rraxfrmemory", metadata.Gauge},
	"RR Cache blocks allocated":                     {"memory", "rr.cache", false, "rrcacheblocksallocated", metadata.Gauge},
	"RR Cache blocks freed":                         {"memory", "rr.cache", false, "rrcacheblocksfreed", metadata.Gauge},
	"RR Cache blocks in use":                        {"memory", "rr.cache", false, "rrcacheblocksinuse", metadata.Gauge},
	"RR Cache memory":                               {"memory", "rr.cache", false, "rrcachememory", metadata.Gauge},
	"RR Copy blocks allocated":                      {"memory", "rr.copy", false, "rrcopyblocksallocated", metadata.Gauge},
	"RR Copy blocks freed":                          {"memory", "rr.copy", false, "rrcopyblocksfreed", metadata.Gauge},
	"RR Copy blocks in use":                         {"memory", "rr.copy", false, "rrcopyblocksinuse", metadata.Gauge},
	"RR Copy memory":                                {"memory", "rr.copy", false, "rrcopymemory", metadata.Gauge},
	"RR DS blocks allocated":                        {"memory", "rr.ds", false, "rrdsblocksallocated", metadata.Gauge},
	"RR DS blocks freed":                            {"memory", "rr.ds", false, "rrdsblocksfreed", metadata.Gauge},
	"RR DS blocks in use":                           {"memory", "rr.ds", false, "rrdsblocksinuse", metadata.Gauge},
	"RR DS memory":                                  {"memory", "rr.ds", false, "rrdsmemory", metadata.Gauge},
	"RR File blocks allocated":                      {"memory", "rr.file", false, "rrfileblocksallocated", metadata.Gauge},
	"RR File blocks freed":                          {"memory", "rr.file", false, "rrfileblocksfreed", metadata.Gauge},
	"RR File blocks in use":                         {"memory", "rr.file", false, "rrfileblocksinuse", metadata.Gauge},
	"RR File memory":                                {"memory", "rr.file", false, "rrfilememory", metadata.Gauge},
	"RR IXFR blocks allocated":                      {"memory", "rr.ixfr", false, "rrixfrblocksallocated", metadata.Gauge},
	"RR IXFR blocks freed":                          {"memory", "rr.ixfr", false, "rrixfrblocksfreed", metadata.Gauge},
	"RR IXFR blocks in use":                         {"memory", "rr.ixfr", false, "rrixfrblocksinuse", metadata.Gauge},
	"RR IXFR memory":                                {"memory", "rr.ixfr", false, "rrixfrmemory", metadata.Gauge},
	"RR NoExist blocks allocated":                   {"memory", "rr.noexist", false, "rrnoexistblocksallocated", metadata.Gauge},
	"RR NoExist blocks freed":                       {"memory", "rr.noexist", false, "rrnoexistblocksfreed", metadata.Gauge},
	"RR NoExist blocks in use":                      {"memory", "rr.noexist", false, "rrnoexistblocksinuse", metadata.Gauge},
	"RR NoExist memory":                             {"memory", "rr.noexist", false, "rrnoexistmemory", metadata.Gauge},
	"RR sets added":                                 {"memory", "rrsetsadded", false, "", metadata.Gauge},
	"RR sets replaced":                              {"domainservices", "dsrecordsreplaced", false, "", metadata.Counter},
	"RR Update blocks allocated":                    {"memory", "rr.update", false, "rrupdateblocksallocated", metadata.Gauge},
	"RR Update blocks freed":                        {"memory", "rr.update", false, "rrupdateblocksfreed", metadata.Gauge},
	"RR Update blocks in use":                       {"memory", "rr.update", false, "rrupdateblocksinuse", metadata.Gauge},
	"RR Update memory":                              {"memory", "rr.update", false, "rrupdatememory", metadata.Gauge},
	"RR WINS blocks allocated":                      {"memory", "rr.wins", false, "rrwinsblocksallocated", metadata.Gauge},
	"RR WINS blocks freed":                          {"memory", "rr.wins", false, "rrwinsblocksfreed", metadata.Gauge},
	"RR WINS blocks in use":                         {"memory", "rr.wins", false, "rrwinsblocksinuse", metadata.Gauge},
	"RR WINS memory":                                {"memory", "rr.wins", false, "rrwinsmemory", metadata.Gauge},
	"RR WINS-PTR blocks allocated":                  {"memory", "rr.winsptr", false, "rrwins-ptrblocksallocated", metadata.Gauge},
	"RR WINS-PTR blocks freed":                      {"memory", "rr.winsptr", false, "rrwins-ptrblocksfreed", metadata.Gauge},
	"RR WINS-PTR blocks in use":                     {"memory", "rr.winsptr", false, "rrwins-ptrblocksinuse", metadata.Gauge},
	"RR WINS-PTR memory":                            {"memory", "rr.winsptr", false, "rrwins-ptrmemory", metadata.Gauge},
	"Safe blocks allocated":                         {"memory", "safe", false, "safeblocksallocated", metadata.Gauge},
	"Safe blocks freed":                             {"memory", "safe", false, "safeblocksfreed", metadata.Gauge},
	"Safe blocks in use":                            {"memory", "safe", false, "safeblocksinuse", metadata.Gauge},
	"Safe memory":                                   {"memory", "safe", false, "safememory", metadata.Gauge},
	"Seconds since start":                           {"time", "timeelapsedsinceserverstart", false, "", metadata.Counter},
	"Seconds since statistics cleared":              {"time", "timeelapsedsincelastclearedstatistics", false, "", metadata.Counter},
	"Secure update continues":                       {"update", "secureupdatecontinues", true, "", metadata.Counter},
	"Secure update DS write failures":               {"update", "securedswritefailure", true, "", metadata.Counter},
	"Secure update failures":                        {"update", "securefailure", true, "", metadata.Counter},
	"Secure update successes":                       {"update", "securesuccess", true, "", metadata.Counter},
	"Security contexts created":                     {"security", "securitycontextcreate", false, "", metadata.Counter},
	"Security contexts dequeued":                    {"security", "securitycontextdequeue", false, "", metadata.Counter},
	"Security contexts freed":                       {"security", "securitycontextfree", false, "", metadata.Counter},
	"Security contexts queue length":                {"security", "securitycontextqueuelength", false, "", metadata.Counter},
	"Security contexts queued":                      {"security", "securitycontextqueue", false, "", metadata.Counter},
	"Security contexts queued in negotiation":       {"security", "securitycontextqueueinnego", false, "", metadata.Counter},
	"Security contexts queued negotiation complete": {"security", "securitycontextqueueinnegocomplete", false, "", metadata.Counter},
	"Security contexts timed out":                   {"security", "securitycontexttimeout", false, "", metadata.Counter},
	"Security packet contexts allocated":            {"memory", "securitypacketcontextsallocated", false, "", metadata.Gauge},
	"Security packet contexts freed":                {"security", "securitypackfree", false, "", metadata.Counter},
	"Security refused":                              {"query", "refusesecurity", false, "", metadata.Counter},
	"Send timeouts":                                 {"recursion", "timedoutqueries", false, "", metadata.Counter},
	"Sends":                                         {"recursion", "sends", false, "", metadata.Counter},
	"Serial number writes":                          {"domainservices", "dsserialwrites", false, "", metadata.Counter},
	"Server failure responses":                      {"recursion", "serverfailure", false, "", metadata.Counter},
	"ServFail":                                      {"error", "errors", false, "servfail", metadata.Counter},
	"ServFail refused":                              {"query", "refuseserverfailure", false, "", metadata.Counter},
	"Shutdown refused":                              {"query", "refuseshutdown", false, "", metadata.Counter},
	"SOA invalid responses":                         {"query", "soaresponseinvalid", false, "", metadata.Counter},
	"SOA NameError responses":                       {"query", "soanameerrorresponses", false, "", metadata.Counter},
	"SOA queries":                                   {"query", "queries", false, "typesoa", metadata.Counter},
	"SOA requests":                                  {"query", "requests", false, "soarequest", metadata.Counter},
	"SOA responses":                                 {"query", "soaresponse", false, "", metadata.Counter},
	"Socket blocks allocated":                       {"memory", "socket", false, "socketblocksallocated", metadata.Gauge},
	"Socket blocks freed":                           {"memory", "socket", false, "socketblocksfreed", metadata.Gauge},
	"Socket blocks in use":                          {"memory", "socket", false, "socketblocksinuse", metadata.Gauge},
	"Socket memory":                                 {"memory", "socket", false, "socketmemory", metadata.Gauge},
	"SRV queries":                                   {"query", "queries", false, "typesrv", metadata.Counter},
	"Standard allocs in use":                        {"memory", "standard", false, "stdinuse", metadata.Gauge},
	"Standard allocs memory":                        {"memory", "standard", false, "stdmemory", metadata.Gauge},
	"Standard allocs returned":                      {"memory", "standard", false, "stdreturn", metadata.Gauge},
	"Standard allocs used":                          {"memory", "standard", false, "stdused", metadata.Gauge},
	"Standard block memory in free list":            {"memory", "standard", false, "stdblockfreelistmemory", metadata.Gauge},
	"Standard block total memory":                   {"memory", "standard", false, "stdblockmemory", metadata.Gauge},
	"Standard blocks allocated":                     {"memory", "standard", false, "stdblockalloc", metadata.Gauge},
	"Standard blocks in free list":                  {"memory", "standard", false, "stdblockfreelist", metadata.Gauge},
	"Standard blocks in use":                        {"memory", "standard", false, "stdblockinuse", metadata.Gauge},
	"Standard blocks returned":                      {"memory", "standard", false, "stdblockreturn", metadata.Gauge},
	"Standard blocks used":                          {"memory", "standard", false, "stdblockused", metadata.Gauge},
	"Standard queries":                              {"query", "standard", false, "", metadata.Counter},
	"Standard to heap allocs in use":                {"memory", "standard.toheap", false, "stdtoheapinuse", metadata.Gauge},
	"Standard to heap allocs memory":                {"memory", "standard.toheap", false, "stdtoheapmemory", metadata.Gauge},
	"Standard to heap allocs returned":              {"memory", "standard.toheap", false, "stdtoheapfree", metadata.Gauge},
	"Standard to heap allocs used":                  {"memory", "standard.toheap", false, "stdtoheapalloc", metadata.Gauge},
	"Stub zone AXFR invalid responses":              {"query", "stubaxfrinvalid", false, "", metadata.Counter},
	"Stub zone AXFR refused responses":              {"query", "stubaxfrrefused", false, "", metadata.Counter},
	"Stub zone AXFR requests":                       {"query", "requests", false, "stubaxfrrequest", metadata.Counter},
	"Stub zone AXFR responses":                      {"query", "stubaxfrresponse", false, "", metadata.Counter},
	"Stub zone AXFR success responses":              {"query", "stubaxfrsuccess", false, "", metadata.Counter},
	"Stuff blocks allocated":                        {"memory", "stuff", false, "stuffblocksallocated", metadata.Gauge},
	"Stuff blocks freed":                            {"memory", "stuff", false, "stuffblocksfreed", metadata.Gauge},
	"Stuff blocks in use":                           {"memory", "stuff", false, "stuffblocksinuse", metadata.Gauge},
	"Stuff memory":                                  {"memory", "stuff", false, "stuffmemory", metadata.Gauge},
	"Successful cache enforcement passes":           {"cache", "successfulfreepasses", false, "", metadata.Counter},
	"Table blocks allocated":                        {"memory", "table", false, "tableblocksallocated", metadata.Gauge},
	"Table blocks freed":                            {"memory", "table", false, "tableblocksfreed", metadata.Gauge},
	"Table blocks in use":                           {"memory", "table", false, "tableblocksinuse", metadata.Gauge},
	"Table memory":                                  {"memory", "table", false, "tablememory", metadata.Gauge},
	"TCP client connections":                        {"query", "tcpclientconnections", false, "", metadata.Counter},
	"TCP Connection blocks allocated":               {"memory", "tcp", false, "tcpconnectionblocksallocated", metadata.Gauge},
	"TCP Connection blocks freed":                   {"memory", "tcp", false, "tcpconnectionblocksfreed", metadata.Gauge},
	"TCP Connection blocks in use":                  {"memory", "tcp", false, "tcpconnectionblocksinuse", metadata.Gauge},
	"TCP Connection memory":                         {"memory", "tcp", false, "tcpconnectionmemory", metadata.Gauge},
	"TCP Packet blocks allocated":                   {"packet", "tcpalloc", false, "", metadata.Counter},
	"TCP Packet blocks freed":                       {"packet", "tcpfree", false, "", metadata.Counter},
	"TCP Packet blocks in use":                      {"packet", "tcpnetallocs", false, "", metadata.Counter},
	"TCP Packet memory":                             {"packet", "tcpmemory", false, "", metadata.Counter},
	"TCP queries sent":                              {"query", "queriessent", false, "tcp", metadata.Counter},
	"TCP recursion disconnects":                     {"recursion", "tcpdisconnect", false, "", metadata.Counter},
	"TCP recursion queries":                         {"recursion", "tcpquery", false, "", metadata.Counter},
	"TCP recursion responses":                       {"recursion", "tcpresponse", false, "", metadata.Counter},
	"TCP recursions tried":                          {"recursion", "tcptry", false, "", metadata.Counter},
	"TCP responses sent":                            {"query", "respondessent", false, "tcp", metadata.Counter},
	"Thread blocks allocated":                       {"memory", "thread", false, "threadblocksallocated", metadata.Gauge},
	"Thread blocks freed":                           {"memory", "thread", false, "threadblocksfreed", metadata.Gauge},
	"Thread blocks in use":                          {"memory", "thread", false, "threadblocksinuse", metadata.Gauge},
	"Thread memory":                                 {"memory", "thread", false, "threadmemory", metadata.Gauge},
	"Timeout blocks allocated":                      {"memory", "timeout", false, "timeoutblocksallocated", metadata.Gauge},
	"Timeout blocks created":                        {"timeout", "arrayblockscreated", false, "", metadata.Counter},
	"Timeout blocks deleted":                        {"timeout", "arrayblocksdeleted", false, "", metadata.Counter},
	"Timeout blocks freed":                          {"memory", "timeout", false, "timeoutblocksfreed", metadata.Gauge},
	"Timeout blocks in use":                         {"memory", "timeout", false, "timeoutblocksinuse", metadata.Gauge},
	"Timeout memory":                                {"memory", "timeout", false, "timeoutmemory", metadata.Gauge},
	"Timeouts for forwarded updates":                {"query", "timeoutsforforwardedupdates", true, "", metadata.Counter},
	"TKeyNego queries":                              {"query", "queries", false, "tkeynego", metadata.Counter},
	"To forwarders":                                 {"query", "toforwarders", false, "", metadata.Counter},
	"Tombstones read":                               {"domainservices", "dstombstonesread", false, "", metadata.Counter},
	"Total failures":                                {"query", "totalfailures", false, "", metadata.Counter},
	"Total LDAP search time":                        {"domainservices", "ldapsearchtime", false, "", metadata.Counter},
	"Total memory":                                  {"memory", "totalmemory", false, "", metadata.Gauge},
	"Total passes":                                  {"recursion", "lookuppasses", false, "", metadata.Counter},
	"Total queries":                                 {"query", "totalqueries", false, "", metadata.Counter},
	"Total questions recursed":                      {"recursion", "totalquestionsrecursed", false, "", metadata.Counter},
	"Total records cached":                          {"record", "cachetotal", false, "", metadata.Counter},
	"Total responses":                               {"recursion", "responses", false, "", metadata.Counter},
	"Transfer failures":                             {"query", "transferfailures", false, "", metadata.Counter},
	"Transfer successes":                            {"query", "transfersuccesses", false, "", metadata.Counter},
	"UDP messages allocated":                        {"packet", "udpmessagesallocated", true, "", metadata.Counter},
	"UDP messages freed":                            {"packet", "udpmessagesfreed", true, "", metadata.Counter},
	"UDP messages in free list":                     {"packet", "udpinfreelist", false, "", metadata.Counter},
	"UDP messages in use":                           {"packet", "udpinuse", false, "", metadata.Counter},
	"UDP messages memory":                           {"packet", "udpmessagesmemory", true, "", metadata.Counter},
	"UDP messages net allocations":                  {"packet", "udpmessagesnetallocations", true, "", metadata.Counter},
	"UDP messages reallocated":                      {"memory", "udpmessagesreallocated", false, "", metadata.Gauge},
	"UDP messages returned":                         {"packet", "udpreturn", false, "", metadata.Counter},
	"UDP messages used":                             {"packet", "udpused", false, "", metadata.Counter},
	"UDP Packet blocks allocated":                   {"packet", "udpalloc", false, "", metadata.Counter},
	"UDP Packet blocks freed":                       {"packet", "udpfree", false, "", metadata.Counter},
	"UDP Packet blocks in use":                      {"packet", "udpnetallocs", false, "", metadata.Counter},
	"UDP Packet memory":                             {"packet", "udpmemory", false, "", metadata.Counter},
	"UDP responses sent":                            {"query", "respondessent", false, "udp", metadata.Counter},
	"UnknownError":                                  {"error", "errors", false, "unknownerror", metadata.Counter},
	"Unsecure responses":                            {"recursion", "responseunsecure", false, "", metadata.Counter},
	"Update aging off":                              {"domainservices", "updateagingoff", false, "", metadata.Counter},
	"Update aging on":                               {"domainservices", "updateagingon", false, "", metadata.Counter},
	"Update aging refresh":                          {"domainservices", "updateaginrefresh", false, "", metadata.Counter},
	"Update blocks allocated":                       {"memory", "update", false, "updateblocksallocated", metadata.Gauge},
	"Update blocks freed":                           {"memory", "update", false, "updateblocksfreed", metadata.Gauge},
	"Update blocks in use":                          {"memory", "update", false, "updateblocksinuse", metadata.Gauge},
	"Update from admin":                             {"domainservices", "updateadmin", false, "", metadata.Counter},
	"Update from auto config":                       {"domainservices", "updateautoconfig", false, "", metadata.Counter},
	"Update from packet":                            {"domainservices", "updatepacket", false, "", metadata.Counter},
	"Update from packet (precon)":                   {"domainservices", "updatepacketprecon", false, "", metadata.Counter},
	"Update from scavenge":                          {"domainservices", "updatescavenge", false, "", metadata.Counter},
	"Update List blocks allocated":                  {"memory", "updatelist", false, "updatelistblocksallocated", metadata.Gauge},
	"Update List blocks freed":                      {"memory", "updatelist", false, "updatelistblocksfreed", metadata.Gauge},
	"Update List blocks in use":                     {"memory", "updatelist", false, "updatelistblocksinuse", metadata.Gauge},
	"Update List memory":                            {"memory", "updatelist", false, "updatelistmemory", metadata.Gauge},
	"Update lists":                                  {"domainservices", "updatelists", false, "", metadata.Counter},
	"Update memory":                                 {"memory", "updatememory", false, "", metadata.Gauge},
	"Update nodes":                                  {"domainservices", "updatenodes", false, "", metadata.Counter},
	"Update nodes read":                             {"domainservices", "dsupdatenodesread", false, "", metadata.Counter},
	"Update queries":                                {"query", "queries", false, "update", metadata.Counter},
	"Update record changes":                         {"domainservices", "updaterecordchange", false, "", metadata.Counter},
	"Update records read":                           {"domainservices", "dsupdaterecordsread", false, "", metadata.Counter},
	"Update searches":                               {"domainservices", "dsupdatesearches", false, "", metadata.Counter},
	"Update tombstones":                             {"domainservices", "updatetombstones", false, "", metadata.Counter},
	"Update writes":                                 {"domainservices", "updatewrites", false, "", metadata.Counter},
	"Updates completed":                             {"update", "completed", true, "", metadata.Counter},
	"Updates empty (precon only)":                   {"update", "empty", true, "", metadata.Counter},
	"Updates for A type":                            {"update", "updates", true, "a", metadata.Counter},
	"Updates for A6 type":                           {"update", "updates", true, "a6", metadata.Counter},
	"Updates for AAAA type":                         {"update", "updates", true, "aaaa", metadata.Counter},
	"Updates for AFSDB type":                        {"update", "updates", true, "afsdb", metadata.Counter},
	"Updates for ATMA type":                         {"update", "updates", true, "atma", metadata.Counter},
	"Updates for CERT type":                         {"update", "updates", true, "cert", metadata.Counter},
	"Updates for CNAME type":                        {"update", "updates", true, "cname", metadata.Counter},
	"Updates for EID type":                          {"update", "updates", true, "eid", metadata.Counter},
	"Updates for GPOS type":                         {"update", "updates", true, "gpos", metadata.Counter},
	"Updates for HINFO type":                        {"update", "updates", true, "hinfo", metadata.Counter},
	"Updates for ISDN type":                         {"update", "updates", true, "isdn", metadata.Counter},
	"Updates for KEY type":                          {"update", "updates", true, "key", metadata.Counter},
	"Updates for KX type":                           {"update", "updates", true, "kx", metadata.Counter},
	"Updates for LOC type":                          {"update", "updates", true, "loc", metadata.Counter},
	"Updates for MB type":                           {"update", "updates", true, "mb", metadata.Counter},
	"Updates for MG type":                           {"update", "updates", true, "mg", metadata.Counter},
	"Updates for MINFO type":                        {"update", "updates", true, "minfo", metadata.Counter},
	"Updates for mixed type":                        {"update", "updates", true, "mixed", metadata.Counter},
	"Updates for MR type":                           {"update", "updates", true, "mr", metadata.Counter},
	"Updates for MX type":                           {"update", "updates", true, "mx", metadata.Counter},
	"Updates for NAPTR type":                        {"update", "updates", true, "naptr", metadata.Counter},
	"Updates for NIMLOC type":                       {"update", "updates", true, "nimloc", metadata.Counter},
	"Updates for NS type":                           {"update", "updates", true, "ns", metadata.Counter},
	"Updates for NSAP type":                         {"update", "updates", true, "nsap", metadata.Counter},
	"Updates for NSAPPTR type":                      {"update", "updates", true, "nsapptr", metadata.Counter},
	"Updates for NULL type":                         {"update", "updates", true, "null", metadata.Counter},
	"Updates for NXT type":                          {"update", "updates", true, "nxt", metadata.Counter},
	"Updates for PTR type":                          {"update", "updates", true, "ptr", metadata.Counter},
	"Updates for PX type":                           {"update", "updates", true, "px", metadata.Counter},
	"Updates for RP type":                           {"update", "updates", true, "rp", metadata.Counter},
	"Updates for RT type":                           {"update", "updates", true, "rt", metadata.Counter},
	"Updates for SIG type":                          {"update", "updates", true, "sig", metadata.Counter},
	"Updates for SOA type":                          {"update", "updates", true, "soa", metadata.Counter},
	"Updates for SRV type":                          {"update", "updates", true, "srv", metadata.Counter},
	"Updates for TXT type":                          {"update", "updates", true, "txt", metadata.Counter},
	"Updates for unknown type":                      {"update", "updates", true, "unknown", metadata.Counter},
	"Updates for WKS type":                          {"update", "updates", true, "wks", metadata.Counter},
	"Updates for X25 type":                          {"update", "updates", true, "x25", metadata.Counter},
	"Updates for ZERO type":                         {"update", "updates", true, "zero", metadata.Counter},
	"Updates forwarded":                             {"update", "forwards", true, "", metadata.Counter},
	"Updates forwarded via TCP":                     {"update", "tcpforwards", true, "", metadata.Counter},
	"Updates in queue":                              {"update", "inqueue", true, "", metadata.Counter},
	"Updates NoOps (duplicates)":                    {"update", "noops", true, "", metadata.Counter},
	"Updates received":                              {"update", "received", true, "", metadata.Counter},
	"Updates rejected":                              {"update", "rejected", true, "", metadata.Counter},
	"Updates rejected with FormError":               {"update", "rejections", true, "rejectedwithformerror", metadata.Counter},
	"Updates rejected with NameError":               {"update", "rejections", true, "rejectedwithnameerror", metadata.Counter},
	"Updates rejected with NotAuth":                 {"update", "rejections", true, "rejectedwithnotauth", metadata.Counter},
	"Updates rejected with NotImpl":                 {"update", "rejections", true, "rejectedwithnotimpl", metadata.Counter},
	"Updates rejected with NotZone":                 {"update", "rejections", true, "rejectedwithnotzone", metadata.Counter},
	"Updates rejected with NxRRSet":                 {"update", "rejections", true, "rejectedwithnxrrset", metadata.Counter},
	"Updates rejected with Refused":                 {"update", "rejections", true, "rejectedwithrefused", metadata.Counter},
	"Updates rejected with Refused (access denied)": {"update", "rejections", true, "rejectedwithrefusedaccessdenied", metadata.Counter},
	"Updates rejected with Refused (nonsecure)":     {"update", "rejections", true, "rejectedwithrefusednonsecure", metadata.Counter},
	"Updates rejected with YxDomain":                {"update", "rejections", true, "rejectedwithyxdomain", metadata.Counter},
	"Updates rejected with YxRRSet":                 {"update", "rejections", true, "rejectedwithyxrrset", metadata.Counter},
	"Updates retried":                               {"update", "retried", true, "", metadata.Counter},
	"Updates suppressed":                            {"domainservices", "updatesuppressed", false, "", metadata.Counter},
	"Updates timed out":                             {"update", "timedout", true, "", metadata.Counter},
	"Verify failed TSIGs":                           {"security", "verifyfailedtsigs", false, "", metadata.Counter},
	"Verify success TSIGs":                          {"security", "verifytsigverifysuccess", false, "", metadata.Counter},
	"WINS forward lookup responses":                 {"wins", "winsresponses", false, "", metadata.Counter},
	"WINS forward lookups":                          {"wins", "winslookups", false, "", metadata.Counter},
	"WINS reverse lookup responses":                 {"wins", "winsreverseresponses", false, "", metadata.Counter},
	"WINS reverse lookups":                          {"wins", "winsreverselookups", false, "", metadata.Counter},
	"YxDomain":                                      {"error", "errors", false, "yxdomain", metadata.Counter},
	"YxRRSet":                                       {"error", "errors", false, "yxrrset", metadata.Counter},
	"Zone blocks allocated":                         {"memory", "zone", false, "zoneblocksallocated", metadata.Gauge},
	"Zone blocks freed":                             {"memory", "zone", false, "zoneblocksfreed", metadata.Gauge},
	"Zone blocks in use":                            {"memory", "zone", false, "zoneblocksinuse", metadata.Gauge},
	"Zone memory":                                   {"memory", "zone", false, "zonememory", metadata.Gauge},
}
