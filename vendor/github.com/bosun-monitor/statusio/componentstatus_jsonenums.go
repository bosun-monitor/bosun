// generated by jsonenums -type=ComponentStatus; DO NOT EDIT

package statusio

import (
	"encoding/json"
	"fmt"
)

var (
	_ComponentStatusNameToValue = map[string]ComponentStatus{
		"Operational":         Operational,
		"DegradedPerformance": DegradedPerformance,
		"PartialOutage":       PartialOutage,
		"MajorOutage":         MajorOutage,
	}

	_ComponentStatusValueToName = map[ComponentStatus]string{
		Operational:         "Operational",
		DegradedPerformance: "DegradedPerformance",
		PartialOutage:       "PartialOutage",
		MajorOutage:         "MajorOutage",
	}
)

func init() {
	var v ComponentStatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_ComponentStatusNameToValue = map[string]ComponentStatus{
			interface{}(Operational).(fmt.Stringer).String():         Operational,
			interface{}(DegradedPerformance).(fmt.Stringer).String(): DegradedPerformance,
			interface{}(PartialOutage).(fmt.Stringer).String():       PartialOutage,
			interface{}(MajorOutage).(fmt.Stringer).String():         MajorOutage,
		}
	}
}

// MarshalJSON is generated so ComponentStatus satisfies json.Marshaler.
func (r ComponentStatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _ComponentStatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid ComponentStatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so ComponentStatus satisfies json.Unmarshaler.
func (r *ComponentStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ComponentStatus should be a string, got %s", data)
	}
	v, ok := _ComponentStatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid ComponentStatus %q", s)
	}
	*r = v
	return nil
}
