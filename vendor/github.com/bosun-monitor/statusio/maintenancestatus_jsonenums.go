// generated by jsonenums -type=MaintenanceStatus; DO NOT EDIT

package statusio

import (
	"encoding/json"
	"fmt"
)

var (
	_MaintenanceStatusNameToValue = map[string]MaintenanceStatus{
		"Scheduled":  Scheduled,
		"InProgress": InProgress,
		"Verifying":  Verifying,
		"Completed":  Completed,
	}

	_MaintenanceStatusValueToName = map[MaintenanceStatus]string{
		Scheduled:  "Scheduled",
		InProgress: "InProgress",
		Verifying:  "Verifying",
		Completed:  "Completed",
	}
)

func init() {
	var v MaintenanceStatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_MaintenanceStatusNameToValue = map[string]MaintenanceStatus{
			interface{}(Scheduled).(fmt.Stringer).String():  Scheduled,
			interface{}(InProgress).(fmt.Stringer).String(): InProgress,
			interface{}(Verifying).(fmt.Stringer).String():  Verifying,
			interface{}(Completed).(fmt.Stringer).String():  Completed,
		}
	}
}

// MarshalJSON is generated so MaintenanceStatus satisfies json.Marshaler.
func (r MaintenanceStatus) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _MaintenanceStatusValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid MaintenanceStatus: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so MaintenanceStatus satisfies json.Unmarshaler.
func (r *MaintenanceStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("MaintenanceStatus should be a string, got %s", data)
	}
	v, ok := _MaintenanceStatusNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid MaintenanceStatus %q", s)
	}
	*r = v
	return nil
}
